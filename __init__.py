from pyo import *

# Sysex messages adapted from
# https://github.com/overtone/overtone/blob/master/src/overtone/device/midi/nanoKONTROL2.clj
sysexes = [

    [0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7], 
    [0xF0, 0x42, 0x40, 0x00, 0x01, 0x13, 0x00, 0x1F, 0x12, 0x00, 0xF7], 
    [0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7], 
    [ 
         0xF0, 0x42, 0x40, 0x00, 0x01, 0x13, 0x00, 0x7F, 
         0x7F, 0x02, 0x03, 0x05, 0x40, 0x00, 0x00, 0x00, 
         0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x20, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x30, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x40, 0x00, 0x7F, 0x00, 0x10, 0x00, 0x01, 0x00, 
         0x01, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x11, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x21, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x31, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x41, 0x00, 0x00, 0x7F, 0x00, 
         0x10, 0x01, 0x00, 0x02, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x12, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x22, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x32, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x42, 
         0x00, 0x7F, 0x00, 0x10, 0x01, 0x00, 0x00, 0x03, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x13, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x23, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x33, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x43, 0x00, 0x7F, 0x00, 0x00, 0x10, 
         0x01, 0x00, 0x04, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x14, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x24, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x34, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x44, 0x00, 
         0x7F, 0x00, 0x10, 0x01, 0x00, 0x00, 0x05, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x15, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x25, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x35, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x45, 0x00, 0x7F, 0x00, 0x00, 0x10, 0x01, 
         0x00, 0x06, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x16, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x26, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x36, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x46, 0x00, 0x00, 0x7F, 
         0x00, 0x10, 0x01, 0x00, 0x07, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x17, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x27, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x37, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x47, 0x00, 0x7F, 0x00, 0x10, 0x00, 0x01, 0x00, 
         0x3A, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x3B, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x2E, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x7F, 
         0x00, 0x01, 0x00, 0x3D, 0x00, 0x00, 0x7F, 0x00, 
         0x01, 0x00, 0x3E, 0x00, 0x7F, 0x00, 0x00, 0x01, 
         0x00, 0x2B, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x00, 
         0x2C, 0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x2A, 
         0x00, 0x7F, 0x00, 0x01, 0x00, 0x00, 0x29, 0x00, 
         0x7F, 0x00, 0x01, 0x00, 0x2D, 0x00, 0x00, 0x7F, 
         0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x7F, 0x00, 
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
         0x00, 0xF7, 
    ], 
    [0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7], 
    [0xF0, 0x42, 0x40, 0x00, 0x01, 0x13, 0x00, 0x1F, 0x11, 0x00, 0xF7]
]

# Map names to CC num's

name2num = {
    'track_left': 58,
    'track_right': 59,
    'cycle': 46,
    'marker_set': 60,
    'marker_prev': 61,
    'marker_next': 62,
    'rw': 43,
    'ff': 44,
    'stop': 42,
    'play': 41,
    'rec': 45,
}

for i in range(8):
    name2num['s%d' % i] = 32+i
    name2num['m%d' % i] = 48+i
    name2num['r%d' % i] = 64+i
    name2num['fader%d' % i] = i
    name2num['knob%d' % i] = 16+i

# Find device & other init's

def init(s):

    global server
    
    server = s

    idev = dict(zip(*pm_get_input_devices()))['nanoKONTROL2 MIDI 1']
    odev = dict(zip(*pm_get_output_devices()))['nanoKONTROL2 MIDI 1']
    server.setMidiInputDevice(idev)
    server.setMidiOutputDevice(odev)

def leds_external():
    ''' Sets the leds to external mode '''
    
    for msg in sysexes:
         server.sysexout(''.join([chr(n) for n in msg]))
        
    for i in name2num.keys():
        led_off(i)

# Leds on & off

def led_on(name):

    server.ctlout(name2num[name], 127)
    

def led_off(name):
    
    server.ctlout(name2num[name], 0)

def led_blink(name, duration=100):
    
    server.ctlout(name2num[name], 127)
    server.ctlout(name2num[name], 0, timestamp=duration)
    

# Sliders & Knobs

def _ctl(name, i):
    
    ctl = Midictl(name2num['%s%i' % (name, i)])
    ctl.setInterpolation(0)
    return ctl


def fader(i):
    
    return _ctl('fader', i)


def knob(i):
    
    return _ctl('knob', i)

# Button Press & Release

def _button_event(name, val):
    
    ctl = Midictl(name2num[name], 0, 127)
    ctl.setInterpolation(0)
    return Select(ctl, val)

def Press(name):
    
    return _button_event(name, 127)


def Release(name):
    
    # FIXME: triggers at startup...
    return _button_event(name, 0)



if __name__ == '__main__':

    server = Server()
    init(server)
    server.boot().start()
    leds_external()
    
    sin = Sine(freq=440+knob(0)*10, mul=fader(0)).stop()
    
    def start():
        
        sin.out()
        led_on('play')
        led_off('stop')
        
    def stop():
        
        sin.stop()
        led_off('play')
        led_on('stop')
    
    stop()
    
    tf1 = TrigFunc(Press('play'), start)
    tf2 = TrigFunc(Press('stop'), stop)
        
    server.gui()